snippet fn0
	${1:fn} :: ${2:a}
	$1 = ${0:undefined}

snippet fn
	${1:fn} :: ${2:a} -> ${3:a}
	$1 ${4:x} = ${0:undefined}

snippet fn2
	${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}
	$1 ${5} = ${0:undefined}

snippet fn3
	${1:fn} :: ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}
	$1 ${6} = ${0:undefined}

snippet ap
	${1:map} (${2:fn}) ${0:list}

snippet eq
	Eq a => ${1:a}

snippet lambda
	(\\${1:x} -> ${2:undefined})

# Especificos

snippet paratodoSnip
	${1:paratodo} :: [a] -> (a -> Bool) -> Bool
	$1 [] fun = True
	$1 (x:xs) fun = fun x && $1 xs fun
	$0

snippet existeSnip
	${1:existe} :: [a] -> (a -> Bool) -> Bool
	$1 [] fun = False
	$1 (x:xs) fun = fun x || $1 xs fun
	$0

snippet perteneceSnip
	${1:pertenece} :: Int -> [Int] -> Bool
	$1 x [] = False
	$1 x (y:ys) | x == y = True
		        | otherwise = x `$1` ys
	$0
